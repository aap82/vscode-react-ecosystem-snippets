{
  "reactClassCompoment": {
    "prefix": "rcc",
    "body": "import React, {Component} from 'react';\n\nexport default class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates a React component class with default export"
  },
  "reactJustClassCompoment": {
    "prefix": "rjcc",
    "body": "class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates just a React component class"
  },
  "reactTsClassCompoment": {
    "prefix": "rtscc",
    "body": "import React, {Component} from 'react';\n\nexport default class ${1:componentName} extends Component<${2:any}, ${3:any}> {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates a React TypeScript component class with default export"
  },
  "reactJustTsClassCompoment": {
    "prefix": "rjtscc",
    "body": "class ${1:componentName} extends Component<${2:any}, ${3:any}> {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates just a React TypeScript component class"
  },

  "reactMobxClassCompoment": {
    "prefix": "rmcc",
    "body": "import React, {Component} from 'react';\nimport {observer} from 'mobx-react';\n\n@observer\nexport default class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates a MobX React component class with default export"
  },
  "reactMobxJustClassCompoment": {
    "prefix": "rmjcc",
    "body": "@observer\nclass ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates just a MobX React component class"
  },
  "reactMobxTsClassCompoment": {
    "prefix": "rmtscc",
    "body": "import React, {Component} from 'react';\nimport {observer} from 'mobx-react';\n\n@observer\nexport default class ${1:componentName} extends Component<${2:any}, ${3:any}> {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates a MobX React component class with default export"
  },
  "reactMobxJustTsClassCompoment": {
    "prefix": "rmjtscc",
    "body": "@observer\nclass ${1:componentName} extends Component<${2:any}, ${3:any}> {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates just a MobX React component class"
  },


  "reactClassCompomentWithMethods": {
    "prefix": "rcfc",
    "body": "import React, {Component} from 'react';\n\nexport default class ${1:componentName} extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t}\n\n\tcomponentWillMount() {\n\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate(nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount() {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t);\n\t}\n}",
    "description": "Creates a React component class with all lifecycle methods and default export"
  },


  "reactStateless": {
    "prefix": "rsc",
    "body": "import React from 'react';\n\nexport default (${1:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n);",
    "description": "Creates an inline SFC with default export"
  },
  "reactStatelessBraces": {
    "prefix": "rscb",
    "body": "import React from 'react';\n\nexport default (${1:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};",
    "description": "Creates an SFC with default export"
  },
  "reactJustInlineStateless": {
    "prefix": "rjsc",
    "body": "const ${1:componentName} = (${2:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n);",
    "description": "Creates just an inline SFC"
  },
  "reactJustStateless": {
    "prefix": "rjscb",
    "body": "const ${1:componentName} = (${2:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};",
    "description": "Creates just an SFC"
  },

  "reactMobxStateless": {
    "prefix": "rmsc",
    "body": "import React from 'react';\nimport {observer} from 'mobx-react';\n\nexport default observer((${1:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n));",
    "description": "Creates an inline MobX SFC with default export"
  },
  "reactMobxStatelessBraces": {
    "prefix": "rmscb",
    "body": "import React from 'react';\nimport {observer} from 'mobx-react';\n\nexport default observer((${1:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});",
    "description": "Creates a MobX SFC with default export"
  },
  "reactJustMobxInlineStateless": {
    "prefix": "rmjsc",
    "body": "const ${1:componentName} = observer((${2:props}) => (\n\t<div>\n\t\t$0\n\t</div>\n));",
    "description": "Creates just an inline MobX SFC"
  },
  "reactJustMobxStateless": {
    "prefix": "rmjscb",
    "body": "const ${1:componentName} = observer((${2:props}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});",
    "description": "Creates just a MobX SFC"
  },


  "classConstructor": {
    "prefix": "ctor",
    "body": "constructor(props) {\n\tsuper(props);\n\t$0\n}",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },

  "dangerouslySetInnerHtml": {
    "prefix": "danger",
    "body": "dangerouslySetInnerHTML={{__html: $0}}",
    "description": "Dangerously set inner html"
  },  

  "componentWillMount": {
    "prefix": "cwm",
    "body": "componentWillMount() {\n\t$0\n}",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },

  "componentDidMount": {
    "prefix": "cdm",
    "body": "componentDidMount() {\n\t$0\n}",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },

  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": "componentWillReceiveProps(nextProps) {\n\t$0\n}",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },

  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}",
    "description": "Invoked before rendering when new props or state are being received. "
  },

  "componentWillUpdate": {
    "prefix": "cwup",
    "body": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}",
    "description": "Invoked immediately before rendering when new props or state are being received."
  },

  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },

  "componentWillUnmount": {
    "prefix": "cwun",
    "body": "componentWillUnmount() {\n\t$0\n}",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },

  "componentRender": {
    "prefix": "ren",
    "body": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },

  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState($0);",
    "description": "Performs a shallow merge of nextState into current state"
  },

  "componentSetStateFunc": {
    "prefix": "sstf",
    "body": "this.setState((state, props) => { return { $0 }});",
    "description": "Performs a shallow merge of nextState into current state"
  },


  "MobxImportsBasic": {
    "prefix": "mobimp",
    "body": "import {action, observable, computed} from 'mobx';",
    "description": "Basic MobX imports"
  },
  "MobxImportsFull": {
    "prefix": "mobimpf",
    "body": "import {action, observable, computed, autorun, reaction, when, observe, intercept, runInAction, untracked, extendObservable, isObservable, toJS} from 'mobx';",
    "description": "Pretty much all MobX imports"
  },
  "MobxReactImportsBasic": {
    "prefix": "mobrimp",
    "body": "import {observer} from 'mobx-react';",
    "description": "Basic MobX-React imports"
  },
  "MobxReactImportsFull": {
    "prefix": "mobrimpf",
    "body": "import {observer, Provider, inject} from 'mobx-react';",
    "description": "All MobX-React imports"
  },  
  "MobxActionClassProperty": {
    "prefix": "mobactp",
    "body": "@action ${1:methodName} = ${2:props} => $0;",
    "description": "MobX action class property"
  },
  "MobxActionClassMethod": {
    "prefix": "mobactm",
    "body": "@action\n${1:methodName}(${2:props}) {\n\t$0\n}",
    "description": "MobX action class method"
  },
  "MobxObservableProperty": {
    "prefix": "mobobs",
    "body": "@observable ${1:propertyName} = $0;",
    "description": "MobX observable property"
  },
  "MobxComputedProperty": {
    "prefix": "mobcom",
    "body": "@computed get ${1:propertyName}() { return $0; }",
    "description": "MobX computed property"
  }
}
